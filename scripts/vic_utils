#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

"""tonic - vic_utils command line interface"""
from __future__ import print_function
import argparse
import subprocess
from tonic import version
from tonic.models.vic import netcdf2vic, compare_soil_params, grid_params, \
    ncparam2ascii, vic2netcdf


# -------------------------------------------------------------------- #
def main():
    """
    Get the script and path to the config_file
    """
    # ---------------------------------------------------------------- #
    # create the top-level parser
    format = lambda prog: argparse.HelpFormatter(prog, max_help_position=25)

    parser = argparse.ArgumentParser(prog='vic_utils',
                                     description='vic_utils command line '
                                                 'interface.',
                                     formatter_class=format)
    parser.add_argument('--version', action='version',
                        version=version.short_version)
    subparsers = parser.add_subparsers(title='vic_utils subcommands')
    # ---------------------------------------------------------------- #

    # ---------------------------------------------------------------- #
    # create the parser for the "netcdf2vic" command
    netcdf2vic_parser \
        = subparsers.add_parser('netcdf2vic',
                                help=netcdf2vic.help,
                                description=netcdf2vic.description)
    netcdf2vic_parser.set_defaults(func=netcdf2vic._run)
    netcdf2vic_parser.add_argument("config",
                                   type=str,
                                   help="Input netcdf2vic Configuration File")
    # ---------------------------------------------------------------- #

    # ---------------------------------------------------------------- #
    # create the parser for the "grid_params" command
    grid_params_parser \
        = subparsers.add_parser('grid_params',
                                help=grid_params.help,
                                description=grid_params.description)
    grid_params_parser.set_defaults(func=grid_params._run)
    grid_params_parser.add_argument("soil_file",
                                    type=str,
                                    help="Input file containing soil parameter"
                                         " data in standard VIC format")
    grid_params_parser.add_argument("-g", "--grid_file",
                                    type=str,
                                    help="Input netCDF target grid",
                                    default=None)
    grid_params_parser.add_argument("-e", "--snow_file",
                                    type=str,
                                    help="Input file containing snowband/"
                                         "elevation band data in standard VIC "
                                         "format",
                                    default=None)
    grid_params_parser.add_argument("-b", "--vegl_file",
                                    type=str,
                                    help="Input file containing vegetation "
                                         "library data in"
                                         " standard VIC format",
                                    default=None)
    grid_params_parser.add_argument("-v", "--veg_file",
                                    type=str,
                                    help="Input file containing vegetation "
                                         "parameter data "
                                         "in standard VIC format",
                                    default=None)
    grid_params_parser.add_argument("-l", "--lake_file",
                                    type=str,
                                    help="Input file containing lake "
                                         "parameter data "
                                         "in standard VIC format",
                                    default=None)
    grid_params_parser.add_argument("-s", "--state_file",
                                    type=str,
                                    help="Input file containing model "
                                         "state data "
                                         "in standard VIC format",
                                    default=None)
    grid_params_parser.add_argument("-o", "--out_file",
                                    type=str,
                                    help="Output file name "
                                         "(default=/params.nc)",
                                    default='params.nc')
    grid_params_parser.add_argument("-t", "--out_state_file",
                                    type=str,
                                    help="Output state file name "
                                         "(default=/state.nc)",
                                    default=None)
    grid_params_parser.add_argument("--VIC_version",
                                    type=str,
                                    help="VIC version to write parameter file "
                                         "for",
                                    choices=['4.1.2', '4.2', '5.0.dev'],
                                    default='4.2')
    grid_params_parser.add_argument("-d", "--grid_decimal",
                                    type=str,
                                    help="Number of decimal places in "
                                         "grid cell center lat/lon "
                                         "coordinates (default=4)",
                                    default=4)
    grid_params_parser.add_argument("--nlayers",
                                    type=str,
                                    help="Number of soil layers "
                                         "(default=3)",
                                    default=3)
    grid_params_parser.add_argument("--snow_bands",
                                    type=str,
                                    help="Number of snow bands "
                                         "(default=1)",
                                    default=1)
    grid_params_parser.add_argument("--veg_classes",
                                    type=str,
                                    help="Number of veg classes "
                                         "(default=11)",
                                    default=11)
    grid_params_parser.add_argument("--max_roots",
                                    type=str,
                                    help="Number of root zones "
                                         "(default=3)",
                                    default=3)
    grid_params_parser.add_argument("--max_numnod",
                                    type=str,
                                    help="Max number of lake nodes "
                                         "(default=10)",
                                    default=10)
    grid_params_parser.add_argument("--soil_nodes",
                                    type=str,
                                    help="Number of soil thermal nodes "
                                         "(default=3)",
                                    default=3)
    grid_params_parser.add_argument("--nfrost",
                                    type=str,
                                    help="Number of spatial frost "
                                         "zones (default=1)",
                                    default=1)
    grid_params_parser.add_argument("--cells",
                                    type=str,
                                    help="Number of cells "
                                         "(default=determine from "
                                         "input files)",
                                    default=None)
    grid_params_parser.add_argument("--organic_fract",
                                    type=str,
                                    help="Flag indicating whether soil "
                                         "parameter file contains organic "
                                         "fractions (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--spatial_frost",
                                    type=str,
                                    help="Flag indicating whether soil "
                                         "parameter file contains spatial "
                                         "frost parameters (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--spatial_snow",
                                    type=str,
                                    help="Flag indicating whether soil "
                                         "parameter file contains spatial "
                                         "snow parameters (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--july_tavg_supplied",
                                    type=str,
                                    help="Flag indicating whether soil "
                                         "parameter file contains July "
                                         "average temperature "
                                         "(default=False)",
                                    default=False)
    grid_params_parser.add_argument("--new_snow_albedo_supplied",
                                    type=str,
                                    help="Flag indicating whether soil "
                                         "parameter file contains albedo "
                                         "of newly-fallen snow "
                                         "(default=False)",
                                    default=False)
    grid_params_parser.add_argument("--veglib_photo",
                                    type=str,
                                    help="Flag indicating whether veg "
                                         "library file contains photo-"
                                         "synthesis parameters "
                                         "(default=False)",
                                    default=False)
    grid_params_parser.add_argument("--veglib_fcan",
                                    type=str,
                                    help="Flag indicating whether veg "
                                         "library file contains fcanopy "
                                         "values (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--blowing_snow",
                                    type=str,
                                    help="Flag indicating whether veg "
                                         "parameter file contains blowing "
                                         "snow parameters (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--vegparam_lai",
                                    type=str,
                                    help="Flag indicating whether veg "
                                         "parameter file contains lai "
                                         "values (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--vegparam_fcan",
                                    type=str,
                                    help="Flag indicating whether veg "
                                         "parameter file contains fcanopy "
                                         "values (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--vegparam_albedo",
                                    type=str,
                                    help="Flag indicating whether veg "
                                         "parameter file contains albedo "
                                         "values (default=False)",
                                    default=False)
    grid_params_parser.add_argument("--lai_src",
                                    type=str,
                                    help="Where to take lai values from; "
                                         "can be one of: \'FROM_VEGLIB\', "
                                         "\'FROM_VEGPARAM\' "
                                         "(default=\'FROM_VEGLIB\')",
                                    choices=['FROM_VEGLIB', 'FROM_VEGPARAM'],
                                    default="FROM_VEGLIB")
    grid_params_parser.add_argument("--fcan_src",
                                    type=str,
                                    help="Where to take fcanopy values from; "
                                         "can be one of: \'FROM_DEFAULT\', "
                                         "\'FROM_VEGLIB\', \'FROM_VEGPARAM\'; "
                                         "\'FROM_DEFAULT\' = set them to 1.0; "
                                         "(default=\'FROM_DEFAULT\')",
                                    choices=['FROM_DEFAULT',
                                             'FROM_VEGLIB', 'FROM_VEGPARAM'],
                                    default="FROM_DEFAULT")
    grid_params_parser.add_argument("--alb_src",
                                    type=str,
                                    help="Where to take albedo values from; "
                                         "can be one of: \'FROM_VEGLIB\', "
                                         "\'FROM_VEGPARAM\' "
                                         "(default=\'FROM_VEGLIB\')",
                                    choices=['FROM_VEGLIB', 'FROM_VEGPARAM'],
                                    default="FROM_VEGLIB")
    grid_params_parser.add_argument("--lake_profile",
                                    type=str,
                                    help="Flag indicating whether lake "
                                         "parameter file contains lake "
                                         "depth-area relationship "
                                         "(default=False)",
                                    default=False)
    grid_params_parser.add_argument("--carbon",
                                    type=str,
                                    help="Flag indicating whether state "
                                         "file contains carbon-cycle "
                                         "variables (default=False)",
                                    default=False)
    # ---------------------------------------------------------------- #

    # ---------------------------------------------------------------- #
    # create the parser for the "ncparam2ascii" command
    ncparam2ascii_parser \
        = subparsers.add_parser('ncparam2ascii',
                                help=ncparam2ascii.help,
                                description=ncparam2ascii.description)
    ncparam2ascii_parser.set_defaults(func=ncparam2ascii._run)
    ncparam2ascii_parser.add_argument("nc_params",
                                      type=str,
                                      help="Input netCDF VIC parameter file")
    ncparam2ascii_parser.add_argument("--soil_prefix",
                                      type=str,
                                      help="Output soil param file prefix "
                                           "(default is same as nc_params)",
                                      default=False)
    ncparam2ascii_parser.add_argument("--veg_prefix",
                                      type=int,
                                      help="Output veg param file prefix",
                                      default=False)
    ncparam2ascii_parser.add_argument("-UL", "--upper_left_corner",
                                      type=int,
                                      help="Upper left corner for subset",
                                      default=False)
    ncparam2ascii_parser.add_argument("-LR", "--lower_right_corner",
                                      type=int,
                                      help="Lower right corner for subset",
                                      default=False)
    ncparam2ascii_parser.add_argument("--outfiles",
                                      type=int,
                                      help="Number of outfiles",
                                      default=1)
    ncparam2ascii_parser.add_argument("--snow_file",
                                      type=str,
                                      help="Name of output snow file",
                                      default=False)
    ncparam2ascii_parser.add_argument("--veg_file",
                                      type=str,
                                      help="Name of output veg_file",
                                      default=False)
    ncparam2ascii_parser.add_argument("--project",
                                      type=str,
                                      help='Use project configuration options',
                                      choices=['RASM'])
    ncparam2ascii_parser.add_argument("--NIJSSEN2ARNO",
                                      help='Convert soil parameters from '
                                           'NIJSSEN2001 format to ARNO format',
                                      action='store_true')
    ncparam2ascii_parser.add_argument("--ARNO2NIJSSEN",
                                      help='Convert soil parameters from '
                                           'ARNO format to NIJSSEN2001 format',
                                      action='store_true')
    # ---------------------------------------------------------------- #

    # ---------------------------------------------------------------- #
    # create the parser for the "compare_soil_params" command
    compare_soil_params_parser \
        = subparsers.add_parser('compare_soil_params',
                                help=compare_soil_params.help,
                                description=compare_soil_params.description)
    compare_soil_params_parser.set_defaults(func=compare_soil_params._run)

    compare_soil_params_parser.add_argument("-d", "--domain_file",
                                            type=str,
                                            help="Input netCDF target grid",
                                            required=True)

    compare_soil_params_parser.add_argument("-s1", "--soil_file1",
                                            type=str,
                                            help="Input file containing soil "
                                                 "parameter",
                                            required=True)
    compare_soil_params_parser.add_argument("-s2", "--soil_file2",
                                            type=str,
                                            help="Input file containing soil "
                                                 "parameter",
                                            required=True)
    compare_soil_params_parser.add_argument("-o", "--out_path",
                                            type=str,
                                            help="outpath for files",
                                            default='./')
    compare_soil_params_parser.add_argument("-t1", "--title1",
                                            type=str,
                                            help="Input tile for soil_file1",
                                            default=None)
    compare_soil_params_parser.add_argument("-t2", "--title2",
                                            type=str,
                                            help="Input tile for soil_file2",
                                            default=None)
    # ---------------------------------------------------------------- #

    # ---------------------------------------------------------------- #
    # create the parser for the "vic2netcdf" command
    vic2netcdf_parser \
        = subparsers.add_parser('vic2netcdf',
                                help=vic2netcdf.help,
                                description=vic2netcdf.description)
    vic2netcdf_parser.set_defaults(func=vic2netcdf._run)
    vic2netcdf_parser.add_argument("config_file",
                                   type=str,
                                   help="Input vic2netcdf Configuration File")
    vic2netcdf_parser.add_argument("--create_batch", type=str,
                                   choices=['days', 'months',
                                            'years', 'variables'],
                                   default=False,
                                   help="Create a batch of config files")
    vic2netcdf_parser.add_argument("--batch_dir", type=str, default="./",
                                   help="Location to put batch config files")
    # ---------------------------------------------------------------- #

    # argcomplete.autocomplete(parser)
    args = parser.parse_args()
    try:
        args.func(args)
    except AttributeError:
        parser.print_help()
    return
# -------------------------------------------------------------------- #


# -------------------------------------------------------------------- #
# completer for subparsers
def complete_subparser_action(prefix, **kwargs):
    internal_actions = ['vic2netcdf', 'netcdf2vic']
    if prefix and any(action.startswith(prefix)
                      for action in internal_actions):
        return internal_actions
    else:
        external_actions = subprocess.check_output("compgen -c " + prefix,
                                                   shell=True,
                                                   executable='/bin/bash')
        external_actions = [a.decode() for a in external_actions.splitlines()]
        return internal_actions + external_actions
# -------------------------------------------------------------------- #


# -------------------------------------------------------------------- #
if __name__ == "__main__":
    main()
# -------------------------------------------------------------------- #
